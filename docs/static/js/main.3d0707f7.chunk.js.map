{"version":3,"sources":["compoments/three-scene.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["vrmLoader","VRMLoader","ThreeScene","props","canvas","scene","camera","renderer","frameId","state","url","onCanvasLoaded","initScene","animate","bind","this","setState","loadVRM","load","vrm","add","model","progress","console","log","loaded","total","error","WebGLRenderer","antialias","width","clientWidth","height","clientHeight","Scene","background","Color","directionalLight","DirectionalLight","position","set","PerspectiveCamera","controls","OrbitControls","domElement","target","update","setSize","setPixelRatio","window","devicePixelRatio","cancelAnimationFrame","removeChild","requestAnimationFrame","render","style","ref","React","Component","App","threeSceneRef","createRef","json","inputUrl","onLoadVRM","current","updateVrmUrl","axios","get","params","then","response","JSON","stringify","data","className","AppBar","color","Toolbar","Button","href","TextField","placeholder","onChange","e","value","variant","size","onClick","Typography","component","Box","bgcolor","fontWeight","m","textAlign","whiteSpace","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d0707f7.chunk.js","sourcesContent":["import React from 'react';\nimport { WebGLRenderer, Scene, PerspectiveCamera, DirectionalLight, Color } from 'three';\nimport { VRM, VRMLoader } from 'three-vrm';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\nconst vrmLoader = new VRMLoader();\n\ninterface VRMLoaderState {\n  url: string;\n}\n\nexport class ThreeScene extends React.Component<{}, VRMLoaderState> {\n  private canvas: HTMLCanvasElement | null = null;\n  private scene: Scene | null = null;\n  private camera: PerspectiveCamera | null = null;\n  private renderer: WebGLRenderer | null = null;\n  private frameId: number | null = null;\n\n  state: VRMLoaderState = {\n    url: 'https://taptappun.s3-ap-northeast-1.amazonaws.com/test/AliciaSolid.vrm',\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.animate = this.animate.bind(this);\n  }\n\n  componentDidMount() {}\n\n  updateVrmUrl(url: string) {\n    this.setState({\n      url: url,\n    });\n    this.loadVRM();\n  }\n\n  private loadVRM() {\n    vrmLoader.load(\n      this.state.url,\n      (vrm: VRM) => {\n        if (this.scene) {\n          this.scene.add(vrm.model);\n        }\n      },\n      (progress: ProgressEvent) => {\n        console.log(progress.loaded / progress.total);\n      },\n      (error: ErrorEvent) => {\n        console.error(error);\n      },\n    );\n  }\n\n  private initScene(canvas: HTMLCanvasElement) {\n    if (!canvas) {\n      return;\n    }\n    const renderer = new WebGLRenderer({ canvas: canvas, antialias: true });\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n    this.canvas = canvas;\n    const scene = new Scene();\n    scene.background = new Color(0x212121);\n\n    const directionalLight = new DirectionalLight(0xffffff);\n    directionalLight.position.set(0, 1, -2);\n    scene.add(directionalLight);\n\n    this.scene = scene;\n    const camera = new PerspectiveCamera(50, width / height, 0.01);\n    camera.position.set(0, 1.5, -1.5);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.target.set(0, 0.75 * 1.5, 0);\n    controls.update();\n    this.camera = camera;\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer = renderer;\n    this.animate();\n  }\n\n  onCanvasLoaded = (canvas: HTMLCanvasElement) => {\n    this.initScene(canvas);\n  };\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.frameId!);\n    if (this.canvas && this.renderer) {\n      this.canvas.removeChild(this.renderer.domElement);\n    }\n  }\n\n  animate() {\n    // 次のフレームを要求\n    this.frameId = window.requestAnimationFrame(this.animate);\n    if (this.renderer && this.scene && this.camera) {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas style={{ width: '80vw', height: '40vw' }} ref={this.onCanvasLoaded} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport { ThreeScene } from './compoments/three-scene';\nimport { AppBar, Box, Button, Link, TextField, Toolbar, Typography } from '@material-ui/core';\n\ninterface LoadJsonState {\n  json: string;\n}\n\nclass App extends React.Component<{}, LoadJsonState> {\n  threeSceneRef = React.createRef<ThreeScene>();\n  state: LoadJsonState = {\n    json: '',\n  };\n\n  private inputUrl: string = '';\n\n  constructor(props: any) {\n    super(props);\n    this.onLoadVRM = this.onLoadVRM.bind(this);\n  }\n\n  onLoadVRM() {\n    if (!this.threeSceneRef.current) {\n      return;\n    }\n    this.threeSceneRef.current.updateVrmUrl(this.inputUrl);\n    axios.get(\"https://qv2p534cl3.execute-api.ap-northeast-1.amazonaws.com/dev/ripper/vrm\", {\n      params: {\n        url: this.inputUrl,\n      }\n    }).then(response => {\n      this.setState({json: JSON.stringify(response.data, null, 2)});\n      console.log(this.state.json);\n    })\n  }\n\n  render():\n    | React.ReactElement<any, string | React.JSXElementConstructor<any>>\n    | string\n    | number\n    | {}\n    | React.ReactNodeArray\n    | React.ReactPortal\n    | boolean\n    | null\n    | undefined {\n    return (\n      <div className=\"App\">\n        <AppBar position=\"relative\" color=\"inherit\">\n          <Toolbar>\n            <Button href=\"./references/\" className=\"App-link\">\n              References\n            </Button>\n            <Button href=\"./swagger/\" className=\"App-link\">\n              Api Docs\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <ThreeScene ref={this.threeSceneRef} />\n        <TextField\n          style={{ width: 800 }}\n          placeholder=\"VRMファイルのURLを入力してください\"\n          onChange={(e) => (this.inputUrl = e.target.value)}\n        />\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={this.onLoadVRM}>\n          VRMをロードする\n        </Button>\n        <Typography component=\"div\">\n          <p>VRMのメタ情報</p>\n          <Box bgcolor=\"#f5f5f5\" fontWeight=\"fontWeightLight\" m={3} style={{textAlign: \"left\", whiteSpace: 'pre'}}>\n            {this.state.json}\n          </Box>\n        </Typography>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}